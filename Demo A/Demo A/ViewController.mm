//
//  ViewController.m
//  Demo A
//
//  Created by Jared Carlson on 5/14/12.
//  Copyright (c) 2012 GoToTheBoard. All rights reserved.
//

#import "ViewController.h"
#import "OpenGLView.h"

#define PERFORMANCE_TESTING 1

@interface ViewController ()

@end

@implementation ViewController

@synthesize indicator, textView, button;

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    
#ifdef PERFORMANCE_TESTING
    _glView = [[OpenGLView alloc] init];
#endif
    
    [textView setText:@""];
    [self runPayloadTest:nil];
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    _glView = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

- (void) finishPayloadTest
{
    UIDevice * device = [UIDevice currentDevice];
    _postTime    = mach_absolute_time();
    _postBattery = [device batteryLevel];
    
    mach_timebase_info_data_t info;
    kern_return_t err =  mach_timebase_info(&info);
    
    if ( err != KERN_SUCCESS )
        NSLog(@"Might have an issue here");
    
    double time =  (_postTime - _preTime ) * 1e-9 * (double) info.numer / (double) info.denom;
    
    NSString * timing = [NSString stringWithFormat:@"testing took %lf seconds",time];
    NSLog(@"%@",timing);
          
    NSString * results = [NSString stringWithFormat:@"Done: post battery %.6f    pre %.6f",_postBattery,_preBattery];
    
    NSLog(@"%@",results);
    NSString * txt = [NSString stringWithFormat:@"%@\n%@\n%@",[textView text],results,timing];
    [textView setText:txt];
}

- (IBAction) runPayloadTest:(id)item
{
    numDownloads = 0;
    
    UIDevice * device = [UIDevice currentDevice];
    [device setBatteryMonitoringEnabled:YES];
    

    _preBattery = [device batteryLevel];
    _preTime    = mach_absolute_time();
    [self downloadPayload];
}

- (void) downloadPayload
{
#define PAYLOAD_URL @"http://www.schazm.com/payloads/mtestpayload.bin"
    
    NSURL * url = [[NSURL alloc] initWithString:PAYLOAD_URL];
    NSURLRequest * request = [[NSURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:60];

    
    NSURLConnection * connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];
    if ( connection ) {
        receivedData = [[NSMutableData alloc] init];
        [indicator startAnimating];
    } else {
        NSLog(@"Error...  check the url...");
    }
}


- (void) connection:(NSURLConnection*)connection didReceiveResponse:(NSData *)data
{
    [receivedData setLength:0];
    
}

- (void) connection:(NSURLConnection*)connection didReceiveData:(NSData *)data
{
    [receivedData appendData:data];
}

- (void) connection:(NSURLConnection*) connection didFailWithError:(NSError *)error
{
    connection = nil;
    receivedData = nil;

    NSLog(@"Connection failed! Error - %@ %@",
            [error localizedDescription],
          [[error userInfo] objectForKey:NSURLErrorFailingURLErrorKey]);
    
}

- (void) connectionDidFinishLoading:(NSURLConnection*) connection
{
    unsigned int length = [receivedData length];
    NSLog(@"Succeeded!  Received %d bytes",length);
    unsigned char * bytes = (unsigned char*)[receivedData bytes];
    
#ifdef PERFORMANCE_TESTING
    // load the texture data into the giView...
    [_glView loadBinaryPayload:bytes length:length];
    
    // now render (calculate) and get results
    if ( [_glView renderAndSweep] )
    {
        // we have a malicious payload...
        NSLog(@"We have discovered a malicious signature");
        [textView setText:@"We have detected a malicious payload\n"];
        [textView setNeedsDisplay];
    }
#else
    [textView setText:@"Downloaded payload without a scan"];
    [textView setNeedsDisplay];
#endif
    
    connection = nil;
    receivedData = nil;
    
    [indicator stopAnimating];
    
    numDownloads++;
    NSString * summary = [NSString stringWithFormat:@"%@%@",[textView text],[NSString stringWithFormat:@"Finished test %d\n",numDownloads]];
    [textView setText:summary];
    [textView setNeedsDisplay];
    
    // sleep here for convenience sake, in practice could create another EAGLContext
    sleep(2);
    
#define THRESHOLD_PAYLOADS 1
    if ( numDownloads >= THRESHOLD_PAYLOADS )
    {
        [self finishPayloadTest];
    }
    else {
        [self downloadPayload];
    }
}

@end
