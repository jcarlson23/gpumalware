//
//  Matrix.h
//  Demo B
//
//  Created by Jared Carlson on 5/14/12.
//  Copyright (c) 2012 GoToTheBoard. All rights reserved.
//

#import <Foundation/Foundation.h>
#include <iostream>
#include <stdint.h>

class Matrix 
{
public:
    Matrix(void);
    Matrix(unsigned int m, unsigned int n);
    Matrix( const Matrix& m);
    
    unsigned int NumberRows(void) const { return row_len; }
    unsigned int NumberCols(void) const { return col_len; }

    /*
     * Static methods to increment sigs to watch in memory..
     */
    static void Increment(uint8_t * sig) {
        static uint32_t signature = 0;
        signature += 0x11;
        for (int i=0; i<6; i++)
            sig[i] = signature;
        if ( signature == 0x99 )
            signature = 0x00;
    }
    
    /*
     * Static methods to swap order for ascending memory..
     */
    static void ReOrder( Matrix * &a, Matrix * &b );
    
    NSString *toString(void);
    
    double& Element(unsigned int,
                    unsigned int);
    friend Matrix operator*( Matrix& m1,  Matrix& m2);
    friend Matrix operator+( Matrix& m1, Matrix& m2);
    friend Matrix operator-( Matrix& m1, Matrix& m2);
    
private:
    uint8_t leading[6];
    double * vals;
    unsigned row_len, col_len;
    uint8_t trailing[6];

};

