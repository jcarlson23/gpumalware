//
//  ViewController.m
//  Demo B
//
//  Created by Jared Carlson on 5/14/12.
//  Copyright (c) 2012 GoToTheBoard. All rights reserved.
//

#import "ViewController.hpp"
#import "Matrix.hpp"
#include <sstream>

#define PERFORMANCE_TESTING 1

using std::stringstream;

@interface ViewController ()

@end

@implementation ViewController

@synthesize ptr;
@synthesize memory_length;
@synthesize plusBtn;
@synthesize minusBtn;
@synthesize multiplyBtn;
@synthesize resultTxt;
@synthesize previewTxt;

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    
    unsigned int i, j;
    void * heap_space = (void*) malloc( sizeof(Matrix) * 3 );
    A = new Matrix(3,3);
    B = new Matrix(3,3);
    C = new Matrix(3,3);
    
    // rearrange memory for consistency's sake
    memmove(heap_space, A, sizeof(Matrix));
    memmove( ((unsigned char*)heap_space + sizeof(Matrix)), B, sizeof(Matrix) );
    memmove( ((unsigned char*)heap_space + 2*sizeof(Matrix)), C, sizeof(Matrix) );
    A = (Matrix*) heap_space;
    B = (Matrix*) ((unsigned char*)heap_space + sizeof(Matrix));
    C = (Matrix*) ((unsigned char*)heap_space + 2 * sizeof(Matrix) );
    
    // populate for now...
    for (i=0; i<3; i++) {
        A->Element(i,i) = i+1;
        B->Element(i,i) = 3-i;
    }
    
    NSLog(@"A = \n%@",A->toString());
    NSLog(@"B = \n%@",B->toString());
    
    (*C) = (*A) * (*B);
    NSLog(@"C = \n%@",C->toString());
    
    // reorder memory so we can pass in to texture...
    Matrix::ReOrder( B, C);
    Matrix::ReOrder( A, B);
    
    unsigned long difference = ( (unsigned long)(C)  - (unsigned long)(A));
    NSLog(@"Difference in locations is %lu",difference);
    

    NSLog(@"A = \n%@",A->toString());
    NSLog(@"B = \n%@",B->toString());
    
    NSLog(@"C = \n%@",C->toString());
    
    memory_length = difference + (unsigned int) sizeof( Matrix );
    ptr = (unsigned char*) A;
    
#ifdef PERFORMANCE_TESTING
    _glView = [[OpenGLView alloc] init];
    [_glView loadMemoryPayload:ptr length:memory_length];
    [_glView setViewController:self];
#endif
    
    stringstream ss (stringstream::in|stringstream::out);
    
    for (j=0; j<3; j++) {
        ss << "[" << A->Element(0,j) << " " << A->Element(1,j) << " " << A->Element(2,j) << "]\t[";
        ss <<        B->Element(0,j) << " " << B->Element(1,j) << " " << B->Element(2,j) << "]\n";
    }
    
    NSString * preview = [[NSString alloc] initWithFormat:@"%s",ss.str().c_str()];
    [previewTxt setText:preview];
    [resultTxt setText:@""];

    
    [self performSelector:@selector(corruptMemory:) withObject:nil afterDelay:6];
    
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    delete A;
    delete B;
    delete C;
    
#ifdef PERFORMANCE_TESTING
    _glView = nil;
#endif
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

- (IBAction)plus:(id)sender
{
    
    (*C) = (*A) + (*B);
    [resultTxt setText:C->toString()];
#ifdef PERFORMANCE_TESTING
    if ( [_glView renderToTexture] )
    {
        [self alertAndQuit];
    }
#endif  
}

- (IBAction)minus:(id)sender
{
    (*C) = (*A) - (*B);
    [resultTxt setText:C->toString()];
#ifdef PERFORMANCE_TESTING
    if ( [_glView renderToTexture] )
    {
        [self alertAndQuit];
    }
#endif  
}

- (IBAction)multiply:(id)sender
{
    (*C) = (*A) * (*B);
    [resultTxt setText:C->toString()];
#ifdef PERFORMANCE_TESTING
    if ( [_glView renderToTexture] )
    {
        [self alertAndQuit];
    }
#endif
}

- (IBAction)corruptMemory:(id)sender
{
    NSLog(@"Corrupting Memory");
    // grab memory from C and corrupt it...
    unsigned int i,s = (unsigned int) sizeof(Matrix);
    unsigned char * p = (unsigned char *) C;
    for (i=0; i<s; i++) {
        p[i] = i;
    }
    
#ifdef PERFORMANCE_TESTING
    [_glView loadMemoryPayload:ptr length:memory_length];
    
    if ( [_glView renderToTexture] )
    {
        [self alertAndQuit];
    }
#else
    [self quit];
#endif
}

- (void) alertAndQuit
{
    if ( isQuiting )
        return;
    NSLog(@"Memory Corruption Detected...");
    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Memory Corruption" message:@"A Memory Corruption has been detected" delegate:self cancelButtonTitle:nil otherButtonTitles:@"Ok",nil];
    [alert show];
    isQuiting = YES;
}

- (void) quit
{
    if ( isQuiting )
        return;
    NSLog(@"Memory Corruption Detected...");
    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:@"Quiting" message:@"Quitting now to compare with non-GPU usage" delegate:self cancelButtonTitle:nil otherButtonTitles:@"Ok",nil];
    [alert show];
    isQuiting = YES;
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    exit(0);
}
@end
