#include "util.h"

#define MIN( x,y ) (x) > (y) ? (y) : (x)

using std::string;
using std::vector;

vector<string> split_line( const string& line )
{
  vector<string> tokens;
  string sub;
  size_t pos = 0, prev_pos = 0, len = line.length(); 
  pos = line.find(" ",prev_pos);
 
  while ( pos != string::npos )
    {
      sub = line.substr( prev_pos, MIN(pos,len) - prev_pos );
      tokens.push_back( sub );
      prev_pos = pos + 1;
      pos = line.find(" ",prev_pos);
    }
  tokens.push_back( line.substr( prev_pos, len ) );

  return tokens;
}

int detect_opt( const char * str )
{
  size_t slen = strlen( str );
  if ( slen > 1 )
    {
      if ( strncmp( str, "-c", 2 ) == 0 )
	return 1;
      else if ( strncmp(str,"-a",2) == 0 )
	return 2;
      else if ( strncmp(str,"-o",2) == 0 )
	return 2;
      else if ( strncmp(str,"-g",2) == 0 )
	return 1;
      else if ( strncmp(str,"-x",2) == 0 )
	return 1;

    }
  return 0;
}

bool detect_regex( const char * str )
{
  return false;
}

int NumberOfFilesPerRegex( const char * str )
{
  return 0;
}

std::vector<std::string> parse_args( int argc, char **argv )
{
  vector<string> arglist;
  int off;

  for (int i=1; i<argc; i++)
    {
      if ( (off = detect_opt( argv[i] )) )
	{
	  i+= ( off - 1 );
	  continue;
	}
      /*
       * Detect a regex...
       */
      else if ( detect_regex( argv[i] ) )
	{

	}
      /*
       * otherwise, we just add a simple string to our arglist..
       */
      else 
	{
	  arglist.push_back( argv[i] );
	}

    }

  return arglist;
}
