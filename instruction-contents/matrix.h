#pragma once
#include <iostream>
#include <exception>
#include <fstream>

class Matrix 
{
 public:
  Matrix( size_t dim );
  Matrix( size_t xdim, size_t ydim );
  Matrix( const Matrix& cm );
  ~Matrix( void );

  float& Element( unsigned int x, unsigned int y);
  friend std::ostream& operator<<(std::ostream &o, Matrix& m);
  friend std::ofstream& operator<<(std::ofstream &fo, Matrix &m);
  unsigned int Rows(void) const { return row_len; }
  unsigned int Cols(void) const { return col_len; }
  Matrix *Column( size_t c );
  Matrix *Row( size_t r );
  float *Data( void ) { return els; }
  void NormalizeRows( void );
  void NormalizeCols( void );

 private:
  unsigned row_len, col_len;
  unsigned int nels;
  float * els;
};

// EOF



