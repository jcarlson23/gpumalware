#include "matrix.h"


Matrix::Matrix( size_t dim ) 
{
  els = (float*) malloc( sizeof(float) * dim * dim );
  nels = dim * dim;
  row_len = dim;
  col_len = dim;
}

Matrix::Matrix( size_t xdim, size_t ydim )
{
  els = (float*) malloc( sizeof(float) * xdim * ydim );
  nels = xdim * ydim;
  row_len = xdim;
  col_len = ydim;
}

Matrix::Matrix( const Matrix& cm )
{
  els = (float*) malloc( sizeof(float) * cm.row_len * cm.col_len );
  nels= cm.row_len * cm.col_len;
  row_len = cm.row_len;
  col_len = cm.col_len;
  memcpy( els, cm.els, nels * sizeof(float) ); 
}

Matrix::~Matrix( void ) 
{
  free( els );
  nels = 0;
}

float& Matrix::Element( unsigned int x, unsigned int y )
{
  unsigned int index = x * col_len + y;
  if ( index > nels )
    {
      // throw exception...
    }
  return els[index];
}

Matrix *Matrix::Column( size_t c )
{
  Matrix * n = new Matrix( row_len, 1 );
  for ( unsigned int i=0; i<row_len; i++)
    n->Element(i,0) = Element(i,c);
  return n;
}


Matrix *Matrix::Row( size_t r )
{
  Matrix * n = new Matrix( 1, col_len );
  for ( unsigned int i=0; i<col_len; i++)
    n->Element(0,i) = Element(r,i);
  return n;
}

void Matrix::NormalizeRows( void )
{

  for (unsigned int i=0; i<row_len; i++)
    {
      float rowsum = 0.0f;
      for (unsigned int j=0; j<col_len; j++)
	{
	  rowsum += Element( i,j );
	}
      // now normalize it...
      if ( rowsum > 0.0f )
	{
	  for (unsigned int j=0; j<col_len; j++)
	    Element( i,j ) /= rowsum;
	}

    }
}

void Matrix::NormalizeCols( void )
{
  for (unsigned int i=0; i<col_len; i++)
    {
      float rowsum = 0.0f;
      for (unsigned int j=0; j<row_len; j++)
	{
	  rowsum += Element( j,i );
	}
      // now normalize it...
      if ( rowsum > 0.0f )
	{
	  for (unsigned int j=0; j<row_len; j++)
	    Element( j,i ) /= rowsum;
	}

    }
}


/*
 * Friend functions, overload the operator <<
 *
 *
 */
std::ostream& operator<<(std::ostream& o, Matrix& m)
{
  for (int i=0; i<m.row_len; i++) {
    for (int j=0; j<m.col_len; j++) {
      o << m.Element(i,j) << " ";
    }
    o << "\n";
  }
  return o;
}

std::ofstream& operator<<(std::ofstream &fo, Matrix &m)
{
  for (int i=0; i<m.row_len; i++) {
    for (int j=0; j<m.col_len; j++) {
      fo << m.Element(i,j) << " ";
    }
    fo << "\n";
  }
  return fo;
}
